//DO NOT EDIT THIS FILE
using System;
using System.Threading;
using System.Threading.Tasks;
using NAudio.CoreAudioApi; // Add NAudio
using Avalonia.Threading;

namespace PetViewerLinux
{
    public class WindowsAudioMonitorService : IAudioMonitorService, IDisposable
    {
        public event EventHandler<AudioActivityChangedEventArgs>? AudioActivityChanged;
        private bool _isMonitoring = false;
        private CancellationTokenSource? _cancellationTokenSource;
        private Task? _monitorTask;

        private bool _lastActivityState = false;
        private readonly float _activityThreshold = 0.01f; // Adjust as needed (1%)
        private readonly int _requiredActiveFrames = 3;
        private readonly int _requiredInactiveFrames = 3;

        private int _activeCounter = 0;
        private int _inactiveCounter = 0;

        public bool IsMonitoring => _isMonitoring;

        public void StartMonitoring()
        {
            if (_isMonitoring) return;

            _isMonitoring = true;
            _cancellationTokenSource = new CancellationTokenSource();
            _monitorTask = Task.Run(() => MonitorAudioActivity(_cancellationTokenSource.Token));
        }

        public void StopMonitoring()
        {
            if (!_isMonitoring) return;

            _isMonitoring = false;
            _cancellationTokenSource?.Cancel();
            _monitorTask?.Wait(500);
            _monitorTask = null;
        }

        private void MonitorAudioActivity(CancellationToken cancellationToken)
        {
            using var deviceEnumerator = new MMDeviceEnumerator();
            using var device = deviceEnumerator.GetDefaultAudioEndpoint(DataFlow.Render, Role.Multimedia);

            while (!cancellationToken.IsCancellationRequested)
            {
                float peak = 0.0f;
                try
                {
                    peak = device.AudioMeterInformation.MasterPeakValue;
                }
                catch
                {
                    // fallback: treat as silence
                    peak = 0.0f;
                }

                bool isActive = peak > _activityThreshold;

                // Debounce for stability
                if (isActive)
                {
                    _activeCounter++;
                    _inactiveCounter = 0;
                }
                else
                {
                    _inactiveCounter++;
                    _activeCounter = 0;
                }

                bool debouncedActive = _activeCounter >= _requiredActiveFrames;
                bool debouncedInactive = _inactiveCounter >= _requiredInactiveFrames;

                if (debouncedActive && !_lastActivityState)
                {
                    _lastActivityState = true;
                    Dispatcher.UIThread.Post(() =>
                    {
                        AudioActivityChanged?.Invoke(this, new AudioActivityChangedEventArgs
                        {
                            IsActive = true,
                            Timestamp = DateTime.Now
                        });
                    });
                }
                else if (debouncedInactive && _lastActivityState)
                {
                    _lastActivityState = false;
                    Dispatcher.UIThread.Post(() =>
                    {
                        AudioActivityChanged?.Invoke(this, new AudioActivityChangedEventArgs
                        {
                            IsActive = false,
                            Timestamp = DateTime.Now
                        });
                    });
                }

                Thread.Sleep(100); // 100ms polling, adjust as necessary
            }
        }

        public void Dispose()
        {
            StopMonitoring();
            _cancellationTokenSource?.Dispose();
        }
    }
}