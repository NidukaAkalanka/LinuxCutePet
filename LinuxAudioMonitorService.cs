// DO NOT EDIT THIS FILE
using System;
using System.Diagnostics;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Avalonia.Threading;

namespace PetViewerLinux
{
    public class LinuxAudioMonitorService : IAudioMonitorService
    {
        public event EventHandler<AudioActivityChangedEventArgs>? AudioActivityChanged;
        
        private bool _isMonitoring = false;
        private CancellationTokenSource? _cancellationTokenSource;
        private Timer? _monitoringTimer;
        private bool _lastActivityState = false;

        public bool IsMonitoring => _isMonitoring;

        public void StartMonitoring()
        {
            if (_isMonitoring) return;

            _isMonitoring = true;
            _cancellationTokenSource = new CancellationTokenSource();

            // Add a 2-second startup delay to avoid false positives from system startup sounds
            _monitoringTimer = new Timer(CheckAudioActivity, null, TimeSpan.FromSeconds(2), TimeSpan.FromMilliseconds(100));
        }

        public void StopMonitoring()
        {
            if (!_isMonitoring) return;

            _isMonitoring = false;
            _cancellationTokenSource?.Cancel();
            _monitoringTimer?.Dispose();
            _monitoringTimer = null;
        }

        private void CheckAudioActivity(object? state)
        {
            if (!_isMonitoring) return;

            try
            {
                // Use pactl to check if there are any active audio streams
                var process = new Process
                {
                    StartInfo = new ProcessStartInfo
                    {
                        FileName = "pactl",
                        Arguments = "list sink-inputs",
                        UseShellExecute = false,
                        RedirectStandardOutput = true,
                        CreateNoWindow = true
                    }
                };

                process.Start();
                var output = process.StandardOutput.ReadToEnd();
                process.WaitForExit();

                // Check if there are any active audio streams
                var isActive = HasActiveAudioStreams(output);

                // Only notify if state changed
                if (isActive != _lastActivityState)
                {
                    _lastActivityState = isActive;
                    
                    // Dispatch to UI thread
                    Dispatcher.UIThread.Post(() =>
                    {
                        AudioActivityChanged?.Invoke(this, new AudioActivityChangedEventArgs
                        {
                            IsActive = isActive,
                            Timestamp = DateTime.Now
                        });
                    });
                }
            }
            catch (Exception ex)
            {
                // Silently handle errors - audio monitoring is not critical
                System.Diagnostics.Debug.WriteLine($"Audio monitoring error: {ex.Message}");
                
                // Fallback: assume no audio activity
                if (_lastActivityState != false)
                {
                    _lastActivityState = false;
                    Dispatcher.UIThread.Post(() =>
                    {
                        AudioActivityChanged?.Invoke(this, new AudioActivityChangedEventArgs
                        {
                            IsActive = false,
                            Timestamp = DateTime.Now
                        });
                    });
                }
            }
        }

        private bool HasActiveAudioStreams(string output)
        {
            try
            {
                // Check if there are any active sink inputs (applications playing audio)
                if (string.IsNullOrWhiteSpace(output))
                    return false;

                // Look for sink inputs that are actually playing (not corked and not muted)
                var lines = output.Split('\n');
                bool hasSinkInput = false;
                bool isNotCorked = false; // In PipeWire/PulseAudio, "Corked: no" means playing
                bool isMuted = true; // Assume muted until proven otherwise
                string currentApplication = "";
                
                foreach (var line in lines)
                {
                    var trimmedLine = line.Trim();
                    
                    // Start of a new sink input
                    if (trimmedLine.StartsWith("Sink Input #"))
                    {
                        // If we were tracking a previous sink input and it was active, return true
                        if (hasSinkInput && isNotCorked && !isMuted && !IsSystemSound(currentApplication))
                        {
                            Console.WriteLine($"Linux: Active audio detected - App: {currentApplication}");
                            return true;
                        }
                            
                        // Reset for new sink input
                        hasSinkInput = true;
                        isNotCorked = false;
                        isMuted = true;
                        currentApplication = "";
                    }
                    
                    // Get application name
                    if (hasSinkInput && trimmedLine.Contains("application.name ="))
                    {
                        currentApplication = trimmedLine.Split('=')[1].Trim().Trim('"');
                    }
                    
                    // Check if this sink input is not corked (actively playing)
                    if (hasSinkInput && trimmedLine.Contains("Corked: no"))
                    {
                        isNotCorked = true;
                    }
                    
                    // Check if this sink input is not muted
                    if (hasSinkInput && trimmedLine.Contains("Mute: no"))
                    {
                        isMuted = false;
                    }
                }
                
                // Check the last sink input
                var result = hasSinkInput && isNotCorked && !isMuted && !IsSystemSound(currentApplication);
                if (result)
                {
                    Console.WriteLine($"Linux: Active audio detected (last) - App: {currentApplication}");
                }
                return result;
            }
            catch
            {
                return false;
            }
        }
        
        private bool IsSystemSound(string applicationName)
        {
            if (string.IsNullOrEmpty(applicationName))
                return false;
                
            // Filter out system sounds and notifications that shouldn't trigger dancing
            var systemSounds = new[]
            {
                "libcanberra", "pulseaudio", "gnome-session", "notification",
                "alert", "system", "bell", "beep", "startup", "login",
                "org.freedesktop", "org.gnome", "systemd"
            };
            
            var lowerName = applicationName.ToLower();
            return systemSounds.Any(sys => lowerName.Contains(sys));
        }

        public void Dispose()
        {
            StopMonitoring();
            _cancellationTokenSource?.Dispose();
        }
    }
}
